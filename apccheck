#!/usr/bin/python
# Python 2.7
#
# Version 0.1.2
#
# This script parses the data returned by apcaccess and returns the requested parameter
# Suggested placement of script on linux: /usr/local/bin/
#

import subprocess
import sys
import traceback

_known_keys = {
    'LOTRANS': (lambda key: SimpleFloat(key)),
    'VERSION': (lambda key: VERSION(key)),
    'LINEV': (lambda key: SimpleFloat(key)),
    'LOADPCT': (lambda key: SimpleFloat(key)),
    'BCHARGE': (lambda key: SimpleFloat(key)),
    'TIMELEFT': (lambda key: SimpleFloat(key)),
    'MBATTCHG': (lambda key: SimpleInt(key)),
    'MINTIMEL': (lambda key: SimpleInt(key)),
    'MAXTIME': (lambda key: SimpleInt(key)),
    'HITRANS': (lambda key: SimpleFloat(key)),
    'BATTV': (lambda key: SimpleFloat(key)),
    'TONBATT': (lambda key: SimpleInt(key)),
    'CUMONBATT': (lambda key: SimpleInt(key)),
    'SELFTEST': (lambda key: SELFTEST(key)),
    'STATFLAG': (lambda key: STATFLAG(key)),
    'NOMINV': (lambda key: SimpleInt(key)),
    'NOMBATTV': (lambda key: SimpleFloat(key)),
    'NOMPOWER': (lambda key: SimpleInt(key))
}
_apcaccess = '/sbin/apcaccess'


def SimpleFloat(key):
    """'3.4 cuils'  >>  3.4"""
    return float(key.split()[0])


def SimpleInt(key):
    """'3 cuils'  >>  3"""
    return int(key.split()[0])


def STATFLAG(key):
    """'0x07000008 Status Flag'  >>  Online"""
    return key.split()[0]  # Need to scour the documentation more


def SELFTEST(key):
    """'NO'  >>  0"""
    if key.lower() == 'no':
        return 0
    return 1


#unused so far
def online(key):
    """'ONLINE'  >>  1"""
    if key.upper() == 'ONLINE':
        return 1
    return 0


def VERSION(key):
    """'3.14.10 (13 September 2011) debian'  >>  '3.14.10'"""
    return key.split()[0]


def main(argv):
    try:
        # Run apcaccess to get the stdout output
        stdout = subprocess.Popen(_apcaccess, shell=True, stdout=subprocess.PIPE)
        stats = {}
        final_stats = {}

        # Each line is delimited by a colon.
        for line in stdout.stdout:
            key, value = line.split(': ')
            stats[key.strip().upper()] = value.strip()

        # Some stats can be stripped and parsed for better readability. This
        # runs them through a dictionary of mapped lambda functions that
        # return properly parsed data.
        for stat in stats:
            try:
                newstat = _known_keys[stat]
            except KeyError:
                # The stat name was not in the dict and doesn't need further
                # processing
                newstat = None
            except ValueError:
                # We tried to parse data that wasn't in a format we expected
                newstat = None
            # If parsed data was returned, we'll use that to replace the
            # default.
            if newstat:
                final_stats[stat] = newstat(stats[stat])
            else:
                final_stats[stat] = stats[stat]
        try:
            # Now we can try printing the requested stat
            print >> sys.stdout, final_stats[argv.upper()]
        except KeyError:
            print >> sys.stderr, 'Specified key not found in apcaccess output.'
            print >> sys.stdout, 'Specified key not found in apcaccess output.'
    except:
        print >> sys.stderr, traceback.format_exc()
        print >> sys.stdout, 'Unhandled Exception!'


if __name__ == '__main__':
    try:
        main(sys.argv[1])
    except IndexError:
        print >> sys.stderr, "No status line specified."
        print >> sys.stdout, "No status line specified."
